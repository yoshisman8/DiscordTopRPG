@page "/characters"
@inject CharacterService Service
@inject UserManager<DiscordUser> UserManager
@attribute [Authorize]
<h3>My characters </h3>

<div>
	<Dropdown>
		<Button Color="Blazorise.Color.Success" @onclick="NewCharacter">
			<i class="fas fa-plus">
				New Character
			</i>
		</Button>
		<DropdownToggle IsSplit="true" />
		<DropdownMenu>
			<DropdownItem @onclick="NewLegacy">New Legacy Character</DropdownItem>
		</DropdownMenu>
	</Dropdown>
	<hr />
	@if (Characters == null)
	{
		<div class="d-flex justify-content-center">
			<div class="spinner-border text-primary" role="status">
				<span class="sr-only">Loading...</span>
			</div>
		</div>
	}
	else
	{

	}
</div>

@code {

	[CascadingParameter] Task<AuthenticationState> authenticationState { get; set; }
	private DiscordUser User { get; set; }
	private List<Character> Characters { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var authstate = await authenticationState;
		User = await UserManager.GetUserAsync(authstate.User);
		Characters = await Service.GetUserCharacters(User.Id);
	}

	private async Task NewCharacter()
	{
		
	}
	private async Task NewLegacy()
	{
		
	}
}
