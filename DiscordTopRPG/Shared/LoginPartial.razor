@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DiscordSocketClient Client
@inject NavigationManager NavigationManager
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

<AuthorizeView>
	<Authorized>
		<ul class="navbar-nav">
			<BarItem>
				<img height="40" width="40" class="nav-item border-dark img-thumbnail rounded-circle" src="@Avatar" />
				<span>Hello @context.User.Identity.Name!</span>
			</BarItem>

			<BarItem>
				<Button Color="Blazorise.Color.Primary" @onclick="Logout">Logout</Button>
			</BarItem>
		</ul>
	</Authorized>

	<NotAuthorized>
		<BarItem>
			<Button Color="Blazorise.Color.Primary" @onclick="Login">Log-in with Discord</Button>
		</BarItem>
	</NotAuthorized>
</AuthorizeView>

@code{
	[CascadingParameter]
	private Task<AuthenticationState> authenticationState { get; set; }

	private string Avatar { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var state = await authenticationState;
		var user = state.User;

		if (user.Identity.IsAuthenticated)
		{
			var appuser = await UserManager.GetUserAsync(user);
			var discorduser = Client.GetUser(appuser.DiscordId);

			Avatar = discorduser.GetAvatarUrl();
		}
	}
	private async Task Login()
	{
		NavigationManager.NavigateTo("/login?redirectUrl=" + NavigationManager.ToBaseRelativePath(NavigationManager.BaseUri));
	}
	private async Task Logout()
	{
		NavigationManager.NavigateTo("/logout");
	}
}
